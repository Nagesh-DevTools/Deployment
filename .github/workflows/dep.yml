name: Unit testing, build, push, deploy workflow

on:
  workflow_dispatch:
  push:

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: SuperPassword

jobs:
  Unit-testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - run: npm install
      - run: npm test
      - run: npm run coverage
        continue-on-error: true

  docker-image:
    runs-on: ubuntu-latest
    needs: Unit-testing
    outputs:
      image-tag: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true   # Push image right after building
          tags: knightfury285/solar:${{ github.sha }}

      - name: Test Docker container
        run: |
          docker run --rm -d --name solarsystem -p 3000:3000 \
            -e MONGO_URI=${MONGO_URI} \
            -e MONGO_USERNAME=${MONGO_USERNAME} \
            -e MONGO_PASSWORD=${MONGO_PASSWORD} \
            knightfury285/solar:${{ github.sha }}
          sleep 10  # wait for container to initialize
          wget -q -O - http://127.0.0.1:3000/live | grep live
          docker stop solarsystem

  deploy:
    runs-on: ubuntu-latest
    needs: docker-image
    steps:
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_KEY }}

      - name: Deploy Docker image on Azure VM
        run: |
          echo "Deploying image knightfury285/solar:${{ needs.docker-image.outputs.image-tag }} to VM"
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << EOF
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
            docker pull knightfury285/solar:${{ needs.docker-image.outputs.image-tag }}
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 3000:3000 knightfury285/solar:${{ needs.docker-image.outputs.image-tag }}
            docker logout
          EOF
